# Server
server.port=${SERVER_PORT:8081}

# Frontend
frontend.allowed-origins=${FRONTEND_ALLOWED_ORIGINS:https://novel-vip.vercel.app,http://localhost:3000}

# Database
spring.datasource.url=jdbc:postgresql://${DB_HOST:postgres}:${DB_PORT:5432}/${DB_NAME:novel_db}
spring.datasource.username=${DB_USER:novel_user}
spring.datasource.password=${DB_PASSWORD:novel_password}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# JWT
novel.app.jwtSecret=${JWT_SECRET:default-secret}
novel.app.jwtExpirationMs=${JWT_EXPIRATION:86400000}

# Cloudinary
cloudinary.cloud.name=${CLOUDINARY_CLOUD_NAME:drpudphzv}
cloudinary.api.key=${CLOUDINARY_API_KEY}
cloudinary.api.secret=${CLOUDINARY_API_SECRET}

# AWS S3
aws.s3.region =${AWS_REGION:us-east-1}
aws.s3.bucket =${AWS_S3_BUCKET:novelvip}
aws.s3.access-key =${AWS_S3_ACCESS_KEY:novel-vip-bucket}
aws.s3.secret-key=${AWS_S3_SECRET_KEY:novel-vip-bucket-secret}
aws.s3.endpoint =${AWS_S3_ENDPOINT:}
aws.s3.path-style-access =${AWS_S3_PATH_STYLE_ACCESS:true}
storage.provider =${STORAGE_PROVIDER:s3}
# Google Cloud TTS
google.credentials.path=${GOOGLE_CREDENTIALS_PATH:/path/to/credentials.json}

# Text to Speech
texttospeech.provider=${TTS_PROVIDER:openai-edge}

# OpenAI Edge TTS
openai.edge.tts.api-key=${OPENAI_EDGE_TTS_API_KEY}
openai.edge.tts.base-url=${OPENAI_EDGE_TTS_BASE_URL:http://localhost:5050}
openai.edge.tts.response-format=${OPENAI_EDGE_TTS_RESPONSE_FORMAT:mp3}
openai.edge.tts.speed=${OPENAI_EDGE_TTS_SPEED:1.0}

# ElevenLabs TTS
elevenlabs.api.key=${ELEVENLABS_API_KEY}
elevenlabs.voice.id=${ELEVENLABS_VOICE_ID}
elevenlabs.model.id=${ELEVENLABS_MODEL_ID:eleven_monolingual_v1}
elevenlabs.base.url=${ELEVENLABS_BASE_URL:https://api.elevenlabs.io}

# Supabase
supabase.url=${SUPABASE_URL}
supabase.service.role.key=${SUPABASE_SERVICE_ROLE_KEY}
supabase.anon.key=${SUPABASE_ANON_KEY}
supabase.webhook.secret=${SUPABASE_WEBHOOK_SECRET}

# Redis
spring.data.redis.host=${REDIS_HOST:redis}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.username=${REDIS_USERNAME:default}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.ssl.enabled=${REDIS_SSL:false}
spring.data.redis.timeout=${REDIS_TIMEOUT:10000}
spring.cache.type=redis
spring.cache.redis.time-to-live=3600000
# ==================================================
# === WebSocket STOMP Relay (ActiveMQ Amazon MQ) ===
# ==================================================
spring.websocket.relay.host=${SPRING_WEBSOCKET_RELAY_HOST:rabbitmq}
spring.websocket.relay.port=${SPRING_WEBSOCKET_RELAY_PORT:61614}
spring.websocket.relay.username=${SPRING_WEBSOCKET_RELAY_USERNAME:guest}
spring.websocket.relay.password=${SPRING_WEBSOCKET_RELAY_PASSWORD:guest}
spring.websocket.relay.virtual-host=${SPRING_WEBSOCKET_RELAY_VHOST:/}
spring.websocket.relay.ssl=${SPRING_WEBSOCKET_RELAY_SSL:true}

# ==================================================
# === (Optional) AMQP for internal queue use =======
# ==================================================

# Optional tuning
spring.rabbitmq.connection-timeout=10000
spring.rabbitmq.cache.channel.size=10

spring.activemq.broker-url=${SPRING_ACTIVEMQ_BROKER_URL:tcp://activemq:61616}
spring.activemq.user=${SPRING_ACTIVEMQ_USER:}
spring.activemq.password=${SPRING_ACTIVEMQ_PASSWORD:}
app.activemq.trust-store=${SPRING_ACTIVEMQ_TRUSTSTORE:}
app.activemq.trust-store-password=${SPRING_ACTIVEMQ_TRUSTSTORE_PASSWORD:}
app.activemq.key-store=${SPRING_ACTIVEMQ_KEYSTORE:}
app.activemq.key-store-password=${SPRING_ACTIVEMQ_KEYSTORE_PASSWORD:}


# Logs
logging.level.root=WARN
logging.level.com.novel.vippro=INFO
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=INFO
logging.level.org.springframework.amqp.rabbit.connection.CachingConnectionFactory=WARN
logging.level.org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer=WARN
logging.level.io.netty=WARN
logging.level.org.springframework.web.socket.messaging=WARN
# OpenAPI config
novel.openapi.dev-url=${OPENAPI_DEV_URL:http://localhost:8081}
novel.openapi.prod-url=${OPENAPI_PROD_URL:http://localhost:8081}

# Actuator
management.endpoints.web.exposure.include=*
# Search
search.provider=${SEARCH_PROVIDER:opensearch}
search.index=${SEARCH_INDEX:novels}
search.full-uri=${SEARCH_FULL_URI:http://opensearch:9200}
spring.elasticsearch.uris=${ELASTICSEARCH_URIS:${SEARCH_BASE_URI:http://elasticsearch:9200}}
search.username=${SEARCH_USERNAME:admin}
search.password=${SEARCH_PASSWORD:admin}

# Multipart upload limits (increase if users upload large EPUBs or archives)
# Example: set to 200MB; adjust as needed.
spring.servlet.multipart.max-file-size=200MB
spring.servlet.multipart.max-request-size=200MB

# If running behind a proxy/load balancer also ensure it allows large request bodies
