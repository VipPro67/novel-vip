version: "3.9"

services  :
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s 
    volumes:
      - ~/.m2:/root/.m2
      - app_logs:/app/logs
    depends_on:
      rabbitmq:
        condition: service_healthy
      # opensearch:
      #   condition: service_healthy
  caddy:
    image: caddy:2.8
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - backend

  # frontend:
  #   build:
  #     context: ../frontend
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     REACT_EDITOR: atom
  #     NEXT_PUBLIC_API_URL: http://localhost:8081
  #     NEXT_PUBLIC_WS_URL: ws://localhost:8081/ws
  #   depends_on:
  #     - backend

  # redis:
  #   image: redis:latest
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   command: [ "redis-server", "--appendonly", "yes" ]

  rabbitmq:
      image: rabbitmq:3-management
      container_name: rabbitmq
      command: >
        bash -c "rabbitmq-plugins enable --offline rabbitmq_stomp rabbitmq_web_stomp &&
                rabbitmq-server"
      environment:
        RABBITMQ_DEFAULT_USER: guest
        RABBITMQ_DEFAULT_PASS: guest
      ports:
        - "5672:5672"     # AMQP
        - "15672:15672"   # Management UI
        - "61613:61613"   # STOMP (for backend apps)
        - "15674:15674"   # Web STOMP (for browsers via ws://localhost:15674/ws)
      healthcheck:
        test: ["CMD", "rabbitmqctl", "status"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 40s

  # postgres:
  #   image: postgres:16
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     POSTGRES_USER: novel_user
  #     POSTGRES_PASSWORD: novel_password
  #     POSTGRES_DB: novel_db
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data

  # elasticsearch:
  #   profiles:
  #     - elasticsearch
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false # Disable HTTPS & auth
  #     - ES_JAVA_OPTS=-Xms1g -Xmx1g
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"
  #   volumes:
  #     - es_data:/usr/share/elasticsearch/data
  #   healthcheck:
  #     test: [ "CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1" ]
  #     interval: 20s
  #     timeout: 10s
  #     retries: 20
  #     start_period: 40s

  # kibana:
  #   profiles:
  #     - elasticsearch
  #   image: docker.elastic.co/kibana/kibana:8.10.2
  #   container_name: kibana
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #   ports:
  #     - "5601:5601"
  # opensearch:
  #   image: opensearchproject/opensearch:2.13.0
  #   environment:
  #     - discovery.type=single-node
  #     - OPENSEARCH_INITIAL_ADMIN_PASSWORD=MyStrongPass123!
  #     - "OPENSEARCH_JAVA_OPTS=-Xms256m -Xmx256m"
  #     - bootstrap.memory_lock=true
  #     - DISABLE_SECURITY_PLUGIN=true
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   mem_limit: 0.8g                                  
  #   ports:
  #     - "9200:9200"
  #     - "9600:9600"
  #   volumes:
  #     - opensearch_data:/usr/share/opensearch/data
  #   healthcheck:
  #     test: [ "CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1" ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 10
  #     start_period: 40s

  # opensearch-dashboards:
  #   image: opensearchproject/opensearch-dashboards:2.13.0
  #   depends_on:
  #     opensearch:
  #       condition: service_healthy
  #   environment:
  #     - OPENSEARCH_HOSTS=http://opensearch:9200
  #     - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
  #   mem_limit: 512m                                 # small dashboard
  #   ports:
  #     - "5601:5601"

  # filebeat:
  #   profiles:
  #     - opensearch
  #     - elasticsearch
  #   image: docker.elastic.co/beats/filebeat:8.10.2
  #   user: root
  #   command: ["--strict.perms=false"]
  #   depends_on:
  #     backend:
  #       condition: service_started
  #   volumes:
  #     - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
  #     - app_logs:/var/log/app
  #   environment:
  #     FILEBEAT_OUTPUT_HOST: ${FILEBEAT_OUTPUT_HOST:-http://opensearch:9200}
  #     FILEBEAT_USERNAME: ${FILEBEAT_USERNAME:-vippro67}
  #     FILEBEAT_PASSWORD: ${FILEBEAT_PASSWORD:-123123}
  #     FILEBEAT_INDEX: ${FILEBEAT_INDEX:-novel-backend-logs}
  #     FILEBEAT_TEMPLATE: ${FILEBEAT_TEMPLATE:-novel-backend-logs}
  #     FILEBEAT_TEMPLATE_PATTERN: ${FILEBEAT_TEMPLATE_PATTERN:-novel-backend-logs-*}

  texttospeech:
    build:
      context: ../tts
      dockerfile: Dockerfile
    ports:
      - "5050:5050"
    env_file:
      - ../tts/.env
    
volumes:
  postgres_data: {}
  es_data: {}
  opensearch_data: {}
  redis_data: {}
  app_logs: {}
  caddy_data: {}
  caddy_config: {}
